{
  "version": 3,
  "sources": ["../main.js", "../graphql/index.js", "../graphql/Scalars.js", "../graphql/Test/Test.gql", "../prisma/prismaClient.js", "../graphql/Test/Test.resolver.js"],
  "sourcesContent": ["import { ApolloServer } from \"@apollo/server\"\r\nimport express from 'express';\r\nimport cors from \"cors\"\r\nimport { expressMiddleware } from \"@apollo/server/express4\"\r\nimport { schema } from \"./graphql\"\r\n\r\n// Setup\r\n// ---------------------------------\r\nconst app = express()\r\nconst port = process.env.PORT || 4000\r\n\r\n// ---------------------------------\r\n// Server\r\n// ---------------------------------\r\nconst server = new ApolloServer({\r\n  schema,\r\n  introspection: true,\r\n})\r\n\r\nawait server.start()\r\n\r\n// ---------------------------------\r\n// Graphql Server\r\n// ---------------------------------\r\napp.use(\r\n  \"/graphql\",\r\n  express.json(),\r\n  cors(),\r\n  expressMiddleware(server, {\r\n      context: async ({ req, res }) => {\r\n          return { request: req, response: res }\r\n      },\r\n  })\r\n)\r\n\r\napp.use(\"/\", (_, res) => {\r\n  return res.json({ message: \"Running graphql dev server. \uD83D\uDCA1\uD83C\uDF41\uD83C\uDF1F \uD83D\uDCA1\uD83C\uDF41\uD83C\uDF1F\" })\r\n})\r\n\r\n// ---------------------------------\r\n// Run Server\r\n// ---------------------------------\r\napp.listen(port, () => {\r\n  console.log('Graphql server started at http://localhost:4000/graphql');\r\n});\r\n\r\nexport { app, server }\r\nexport default app", "import { mergeSchemas } from \"@graphql-tools/schema\"\r\nimport { ScalarDef, ScalarResolver } from \"./Scalars\"\r\nimport { TestDef, TestResolver } from \"./Test/Test.resolver\"\r\n\r\nconst typeDefs = [\r\n  ScalarDef,\r\n  TestDef,\r\n]\r\n\r\nconst resolvers = [\r\n  ScalarResolver,\r\n  TestResolver,\r\n]\r\n\r\n// For long running servers\r\nconst schema = mergeSchemas({ typeDefs, resolvers })\r\n\r\nexport { schema }\r\n", "import { typeDefs, resolvers as ScalarResolver } from 'graphql-scalars';\r\nimport { mergeTypeDefs } from \"@graphql-tools/merge\"\r\nimport { gql } from \"graphql-modules\"\r\n\r\n\r\nconst scalarTypeDefs = gql`\r\nscalar Timestamp\r\nscalar DateTime\r\nscalar DateTimeISO\r\nscalar LocalDateTime\r\nscalar JSON\r\nscalar JSONObject\r\nscalar EmailAddress\r\n`\r\n\r\nconst ScalarDef = mergeTypeDefs([typeDefs, scalarTypeDefs])\r\n\r\nexport { ScalarDef, ScalarResolver }", "const documentNode = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"Test\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"Query\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"description\":undefined,\"name\":{\"kind\":\"Name\",\"value\":\"Tests\"},\"arguments\":[],\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Test\"}}},\"directives\":[]}]}],\"loc\":{\"start\":0,\"end\":64}};\nexport default documentNode;", "import { PrismaClient } from '@prisma/client'\r\nconst prisma = new PrismaClient()\r\n\r\nexport { prisma }\r\nexport default prisma", "import TestDef from \"./Test.gql\"\r\nimport { prisma } from \"@gql-app/prisma/prismaClient\"\r\n\r\nconst Query = {\r\n    Tests: async () => {\r\n        return await prisma.test.findMany()\r\n    }\r\n}\r\n\r\nconst TestResolver = { Query }\r\nexport { TestDef, TestResolver }"],
  "mappings": "AAAA,OAAS,gBAAAA,MAAoB,iBAC7B,OAAOC,MAAa,UACpB,OAAOC,MAAU,OACjB,OAAS,qBAAAC,MAAyB,0BCHlC,OAAS,gBAAAC,MAAoB,wBCA7B,OAAS,YAAAC,EAAU,aAAaC,MAAsB,kBACtD,OAAS,iBAAAC,MAAqB,uBAC9B,OAAS,OAAAC,MAAW,kBAGpB,IAAMC,EAAiBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUjBE,EAAYH,EAAc,CAACF,EAAUI,CAAc,CAAC,ECf1D,IAAME,EAAe,CAAC,KAAO,WAAW,YAAc,CAAC,CAAC,KAAO,uBAAuB,YAAc,OAAU,KAAO,CAAC,KAAO,OAAO,MAAQ,MAAM,EAAE,WAAa,CAAC,EAAE,WAAa,CAAC,EAAE,OAAS,CAAC,CAAC,KAAO,kBAAkB,YAAc,OAAU,KAAO,CAAC,KAAO,OAAO,MAAQ,MAAM,EAAE,UAAY,CAAC,EAAE,KAAO,CAAC,KAAO,YAAY,KAAO,CAAC,KAAO,OAAO,MAAQ,QAAQ,CAAC,EAAE,WAAa,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAO,uBAAuB,YAAc,OAAU,KAAO,CAAC,KAAO,OAAO,MAAQ,OAAO,EAAE,WAAa,CAAC,EAAE,WAAa,CAAC,EAAE,OAAS,CAAC,CAAC,KAAO,kBAAkB,YAAc,OAAU,KAAO,CAAC,KAAO,OAAO,MAAQ,OAAO,EAAE,UAAY,CAAC,EAAE,KAAO,CAAC,KAAO,WAAW,KAAO,CAAC,KAAO,YAAY,KAAO,CAAC,KAAO,OAAO,MAAQ,MAAM,CAAC,CAAC,EAAE,WAAa,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAM,CAAC,MAAQ,EAAE,IAAM,EAAE,CAAC,EAChvBC,EAAQD,ECDf,OAAS,gBAAAE,MAAoB,iBAC7B,IAAMC,EAAS,IAAID,ECEnB,IAAME,EAAQ,CACV,MAAO,SACI,MAAMC,EAAO,KAAK,SAAS,CAE1C,EAEMC,EAAe,CAAE,MAAAF,CAAM,EJL7B,IAAMG,EAAW,CACfC,EACAC,CACF,EAEMC,EAAY,CAChBC,EACAC,CACF,EAGMC,EAASC,EAAa,CAAE,SAAAP,EAAU,UAAAG,CAAU,CAAC,EDPnD,IAAMK,EAAMC,EAAQ,EACdC,EAAO,QAAQ,IAAI,MAAQ,IAK3BC,EAAS,IAAIC,EAAa,CAC9B,OAAAC,EACA,cAAe,EACjB,CAAC,EAED,MAAMF,EAAO,MAAM,EAKnBH,EAAI,IACF,WACAC,EAAQ,KAAK,EACbK,EAAK,EACLC,EAAkBJ,EAAQ,CACtB,QAAS,MAAO,CAAE,IAAAK,EAAK,IAAAC,CAAI,KAChB,CAAE,QAASD,EAAK,SAAUC,CAAI,EAE7C,CAAC,CACH,EAEAT,EAAI,IAAI,IAAK,CAACU,EAAGD,IACRA,EAAI,KAAK,CAAE,QAAS,qFAA4C,CAAC,CACzE,EAKDT,EAAI,OAAOE,EAAM,IAAM,CACrB,QAAQ,IAAI,yDAAyD,CACvE,CAAC,EAGD,IAAOS,EAAQC",
  "names": ["ApolloServer", "express", "cors", "expressMiddleware", "mergeSchemas", "typeDefs", "ScalarResolver", "mergeTypeDefs", "gql", "scalarTypeDefs", "ScalarDef", "documentNode", "Test_default", "PrismaClient", "prisma", "Query", "prisma", "TestResolver", "typeDefs", "ScalarDef", "Test_default", "resolvers", "ScalarResolver", "TestResolver", "schema", "mergeSchemas", "app", "express", "port", "server", "ApolloServer", "schema", "cors", "expressMiddleware", "req", "res", "_", "main_default", "app"]
}
